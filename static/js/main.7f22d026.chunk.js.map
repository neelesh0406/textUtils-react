{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onChange","colorSelector","name","defaultChecked","value","htmlFor","onClick","toggleMode","Alert","alert","role","message","TextForm","wordCount","useState","text","setText","endsWith","split","length","heading","event","target","style","color","backgroundColor","bg","rows","placeholder","btnColor","newText","toUpperCase","showAlert","toLowerCase","reverse","join","i","charAt","substr","defaultProps","aboutText","App","setmode","setbg","setBtnColor","setalert","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7f22d026.chunk.js","sourcesContent":["import React from 'react'; //Shorthand rcf from extension\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom'\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n            {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n            <button className=\"navbar-toggler\" type =\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n            </li>\n            {/* <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n            </li>\n            <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"/contact\">Contact Us</a>\n            </li> */}\n            </ul>\n            </div>\n            { //These color scheme buttons are visible only when the dark mode is enabled\n            props.mode==='dark' && <div onChange={props.colorSelector} className=\"mx-3\">\n                <input type =\"radio\" className=\"btn-check\" id=\"option1\" name=\"t\"  defaultChecked value=\"primary\" />\n                <label className=\"btn btn-outline-primary mx-1\" htmlFor=\"option1\" >blue</label>\n                <input type =\"radio\" className=\"btn-check\" id=\"option2\" name=\"t\" value=\"success\"/>\n                <label className=\"btn btn-outline-success mx-1\" htmlFor=\"option2\">green</label>\n                <input type =\"radio\" className=\"btn-check\" id=\"option3\" name=\"t\" value=\"danger\"/>\n                <label className=\"btn btn-outline-danger mx-1\" htmlFor=\"option3\">red</label>\n            </div>\n            }\n            <div className=\"form-check form-switch\">\n            <input className=\"form-check-input\" onClick={props.toggleMode} type =\"checkbox\" id=\"flexSwitchCheckDefault\" />\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode===\"light\"?\"dark\": \"light\"} mode</label>\n            </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string,\n    aboutText: PropTypes.string\n};\n\nNavbar.defaultProps = {\n    title: \"Enter a title\",\n    aboutText: \"About Us\"\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n    return (\n        //if props.alert is true, then only the next statement will be executed\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong className=\"text-capitalize\">{props.alert.type}</strong> : {props.alert.message}\n        </div>\n    )\n}\n","import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n    \n    //Convert to uppercase \n    const handleUpClick = () => {\n        const newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Converted to uppercase\",\"success\");\n    }\n    //Convert to lowercase \n    const handleLoClick = () => {\n        const newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Converted to lowercase\",\"success\");\n    }\n    //Clear text\n    const handleClearClick = () => {\n        const newText = \"\";\n        setText(newText);\n        props.showAlert(\"Text cleared\",\"success\");\n    }\n    //Reverse the text\n    const handleRevClick = () => {\n        const newText = text.split(\"\").reverse().join(\"\");\n        setText(newText);\n        props.showAlert(\"Reversed the text\",\"success\");\n    }\n    //Capitalize text\n    const handleCapClick = () => {\n        let newText = text.split(\" \");\n        for (let i in newText){\n            newText[i] = newText[i].charAt(0).toUpperCase() + newText[i].substr(1).toLowerCase();\n        }\n        newText = newText.join(\" \");\n        setText(newText);\n        props.showAlert(\"Capitalized the text\",\"success\");\n    }\n\n    //Function which allows us to write in the text area\n    const onChangeFunc = (event) => {\n        setText(event.target.value);\n    }\n\n    //State variable\n    const [text, setText] = useState(\"\");\n    \n    let wordCount;\n    if(text.endsWith(\" \")){\n        wordCount = text.split(\" \").length - 1;\n    }else{\n        wordCount = text.split(\" \").length;\n    }\n\n    return (\n        <>\n        <div className=\"container my-5 px-5\">\n            <h1>{props.heading}</h1>\n            <textarea className=\"form-control\" value={text} onChange={onChangeFunc}  style={props.mode==='light' ? {color: 'black', backgroundColor: 'white'}:{color: 'wheat', backgroundColor: props.bg}} id=\"textAreaExample2\" rows=\"8\" placeholder=\"Ente text here...\"></textarea>\n            <button className={`btn btn-${props.btnColor} my-2 mx-1`} onClick={handleUpClick}>Convert to UPPERCASE</button>\n            <button className={`btn btn-${props.btnColor} my-2 mx-1`} onClick={handleLoClick}>Convert to lowercase</button>\n            <button className={`btn btn-${props.btnColor} my-2 mx-1`} onClick={handleClearClick}>Clear Text</button>\n            <button className={`btn btn-${props.btnColor} my-2 mx-1`} onClick={handleRevClick}>Reverse Text</button>\n            <button className={`btn btn-${props.btnColor} my-2 mx-1`} onClick={handleCapClick}>Capitalize Text</button>\n        </div>\n        <div className=\"container px-5\">\n            <h2>Text Information</h2>\n            <p className=\"text-muted\">{text===\"\" ? 0:wordCount} words and {text.length} characters</p>\n            <h3>Preview</h3>\n            <p className=\"text-muted\">{text.length>0 ? text: \"Enter something in the textbox above to preview here\"}</p>\n        </div>\n        </>\n    )\n}\n","import { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light');    //Default is light mode\n\n  //To toggle b/w light and dark mode\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.color = 'white';\n      // document.body.style.backgroundColor = '#132231';\n      document.body.style.backgroundColor = bg;\n      showAlert(\"Switched to dark mode\", \"success\");\n      document.title = \"TextUtils - Dark mode\";\n    } else {\n      setmode('light');\n      document.body.style.color = 'black';\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Switched to light mode\", \"success\");\n      document.title = \"TextUtils - Light mode\";\n    }\n  }\n\n  const [bg, setbg] = useState(\"#132231\");  //Decides the background color in Dark mode based on color scheme buttons\n  const [btnColor, setBtnColor] = useState(\"primary\");  //To modify the color of buttons on page according to color scheme\n\n  //Function which gets triggered when any of the color schemes is selected (default bluish)\n  const colorSelector = (event) => {\n    if (event.target.value === 'primary') {\n      setbg(\"#132231\");\n      setBtnColor(\"primary\");\n      document.body.style.backgroundColor = \"#132231\";\n    }\n    else if (event.target.value === 'success') {\n      setbg(\"#0a1c13\");\n      setBtnColor(\"success\");\n      document.body.style.backgroundColor = \"#0a1c13\";\n    }\n    else {\n      setbg(\"#430b0b\");\n      setBtnColor(\"danger\");\n      document.body.style.backgroundColor = \"#430b0b\";\n    }\n  }\n\n  const [alert, setalert] = useState(null);\n  //Function to show alerts \n  const showAlert = (message, type) => {\n    setalert({\n      message: message,\n      type: type\n    })\n    //To make the alert disappear after 1.5 sec\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} colorSelector={colorSelector} />\n        <Alert alert={alert} />\n        <div className=\"container\">\n          {/* <Switch> */}\n            {/* The reason to use 'exact' keyword before path is, react matches the path partially & that can cause issues\n                /users  --> Component 1\n                /users/profile  --> Component 1 */}\n            {/* <Route exact path=\"/about\">\n              <About mode={mode} bg={bg} />\n            </Route> */}\n            {/* <Route exact path=\"/\"> */}\n              <TextForm heading=\"Enter text for analysis here\" mode={mode} showAlert={showAlert} bg={bg} btnColor={btnColor} />\n            {/* </Route> */}\n          {/* </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}